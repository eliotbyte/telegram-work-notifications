import os
import json
import asyncio
import logging
from email import policy
from email.parser import BytesParser
from imapclient import IMAPClient
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv
from datetime import datetime, timedelta

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –ø–∞—Ä—Å–µ—Ä Jira
from filters.jira_parser import parse_jira_email

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHECK_INTERVAL = int(os.getenv("CHECK_INTERVAL", "60"))
DATA_DIR = "/app/data"
USER_CONFIG_FILE = os.path.join(DATA_DIR, "user_config.json")

logging.basicConfig(level=logging.INFO)

user_configs = {}

def load_user_config():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ JSON-—Ñ–∞–π–ª–∞, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç last_uid –∏–∑ str –≤ int,
       –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ last_check_time –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è."""
    global user_configs
    if os.path.exists(USER_CONFIG_FILE):
        with open(USER_CONFIG_FILE, "r", encoding="utf-8") as f:
            user_configs = json.load(f)

            for cfg in user_configs.values():
                # last_uid: "null" -> None, —Å—Ç—Ä–æ–∫–∞ -> int
                if cfg["last_uid"] == "null":
                    cfg["last_uid"] = None
                elif isinstance(cfg["last_uid"], str):
                    cfg["last_uid"] = int(cfg["last_uid"])

                # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—è last_check_time ‚Äì —Å—Ç–∞–≤–∏–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
                if "last_check_time" not in cfg:
                    cfg["last_check_time"] = datetime.now().isoformat()
    else:
        user_configs = {}

def save_user_config():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ JSON-—Ñ–∞–π–ª."""
    with open(USER_CONFIG_FILE, "w", encoding="utf-8") as f:
        json.dump(user_configs, f, ensure_ascii=False, indent=2)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å /connect, —á—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å –ø–æ—á—Ç—É —á–µ—Ä–µ–∑ IMAP.")

async def connect(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /connect."""
    await update.message.reply_text(
        "–í–≤–µ–¥–∏ —Å–≤–æ—é –ø–æ—á—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n`email@example.com –ø–∞—Ä–æ–ª—å`\n\n‚ö†Ô∏è –ü–∞—Ä–æ–ª—å —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–∏–¥–µ.",
        parse_mode='Markdown'
    )

async def handle_credentials(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ—á—Ç—ã –∏ –ø–∞—Ä–æ–ª—è. –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ñ–∏–≥ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ."""
    if not update.message:
        return

    try:
        email_addr, password = update.message.text.strip().split()

        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —É—á—ë—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø—ã—Ç–∞—è—Å—å –∑–∞–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è
        try:
            with IMAPClient("imap.yandex.ru", ssl=True) as client:
                client.login(email_addr, password)
        except Exception as e:
            await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ –ø–æ—á—Ç—É:\n{e}")
            logging.warning(f"[{update.effective_user.id}] –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –ø–æ—á—Ç–∞: {e}")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id_str = str(update.effective_user.id)
        user_configs[user_id_str] = {
            "email": email_addr,
            "password": password,
            "last_uid": None,
            # –ü—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∞–≤–∏–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
            "last_check_time": datetime.now().isoformat()
        }
        save_user_config()

        await update.message.reply_text("‚úÖ –ü–æ—á—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –ü—Ä–æ–≤–µ—Ä–∏–º –ø–∏—Å—å–º–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
        logging.info(f"[{update.effective_user.id}] –ü–æ—á—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {email_addr}")

    except ValueError:
        await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü—Ä–∏–º–µ—Ä: `email@example.com –ø–∞—Ä–æ–ª—å`", parse_mode="Markdown")

async def check_mail_for_all_users(app: Application):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—á—Ç—É –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞).
    –í–Ω—É—Ç—Ä–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–∑—ã–≤–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é check_and_notify.
    """
    tasks = []
    for user_id_str, config in user_configs.items():
        tasks.append(asyncio.create_task(check_and_notify(app, int(user_id_str), config)))

    # –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
    if tasks:
        await asyncio.gather(*tasks)

async def check_and_notify(app: Application, user_id: int, config: dict):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á—ë—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ last_uid.
    –£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –Ω–æ–≤—ã—Ö –ø–∏—Å—å–º–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—à–ª–∏ –ø–æ—Å–ª–µ last_check_time –∏ –∏–º–µ—é—Ç UID > last_uid.
    """
    HOST = 'imap.yandex.ru'
    email_addr = config["email"]

    logging.info(f"[{user_id}] –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—á—Ç—É {email_addr}")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    last_check_time = datetime.fromisoformat(config.get("last_check_time", datetime.now().isoformat()))
    now_dt = datetime.now()

    # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 15 –º–∏–Ω—É—Ç –º–µ–∂–¥—É now –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π ‚Äî —Å–º–µ—â–∞–µ–º last_check_time
    if (now_dt - last_check_time) > timedelta(minutes=15):
        last_check_time = now_dt - timedelta(minutes=15)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞—Ç—É (–±–µ–∑ —É—á—ë—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏) –¥–ª—è IMAP-—Ñ–∏–ª—å—Ç—Ä–∞ SINCE
    since_str = last_check_time.strftime("%d-%b-%Y")

    # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É —Å IMAP –≤—ã–Ω–æ—Å–∏–º –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é, —á—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å –µ—ë —á–µ—Ä–µ–∑ asyncio.to_thread(...)
    def fetch_new_messages():
        """
        –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ IMAP, –∏—â–µ–º –ø–∏—Å—å–º–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ (uid, subject, from_, raw_html).
        """
        result = []
        try:
            with IMAPClient(HOST, ssl=True) as client:
                client.login(config["email"], config["password"])
                client.select_folder("INBOX", readonly=True)  # <-- –í–ê–ñ–ù–û: readonly —Ä–µ–∂–∏–º!

                messages = client.search(["SINCE", since_str])
                logging.info(f"[{user_id}] –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º (–ø–æ –¥–∞—Ç–µ {since_str}): {len(messages)}")

                last_uid = config.get("last_uid", None)
                for uid in messages:
                    if last_uid and uid <= last_uid:
                        continue

                    # —á–∏—Ç–∞–µ–º –ø–∏—Å—å–º–æ
                    raw_data = client.fetch([uid], ["BODY[]"])[uid][b"BODY[]"]
                    msg = BytesParser(policy=policy.default).parsebytes(raw_data)
                    subject = msg["subject"] or "(–±–µ–∑ —Ç–µ–º—ã)"
                    from_ = msg["from"] or "(–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ)"

                    # –ò—â–µ–º HTML-–∫–æ–Ω—Ç–µ–Ω—Ç (–ø–µ—Ä–µ–±–∏—Ä–∞–µ–º —á–∞—Å—Ç–∏ –ø–∏—Å—å–º–∞)
                    raw_html = ""
                    if msg.is_multipart():
                        for part in msg.walk():
                            ctype = part.get_content_type()
                            if ctype == "text/html":
                                charset = part.get_content_charset() or "utf-8"
                                raw_html = part.get_payload(decode=True).decode(charset, errors="replace")
                                break
                    else:
                        # –ï—Å–ª–∏ –ø–∏—Å—å–º–æ –Ω–µ multipart, –Ω–æ –≤–¥—Ä—É–≥ HTML
                        if msg.get_content_type() == "text/html":
                            charset = msg.get_content_charset() or "utf-8"
                            raw_html = msg.get_payload(decode=True).decode(charset, errors="replace")

                    result.append((uid, subject, from_, raw_html))
        except Exception as e:
            logging.error(f"[{user_id}] IMAP –æ—à–∏–±–∫–∞: {e}")
        return result

    # –í—ã–ø–æ–ª–Ω—è–µ–º fetch –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ (—á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å event loop)
    new_messages = await asyncio.to_thread(fetch_new_messages)

    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–µ –ø–∏—Å—å–º–∞ –∏ —Ä–∞—Å—Å—ã–ª–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    for uid, subject, from_, raw_html in new_messages:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è Jira
        jira_msgs = []
        if raw_html:
            jira_msgs = parse_jira_email(subject, raw_html)

        if jira_msgs:
            # –ï—Å–ª–∏ –ø–∞—Ä—Å–µ—Ä –≤–µ—Ä–Ω—É–ª —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –∏—Ö –≤—Å–µ.
            for message_text in jira_msgs:
                await app.bot.send_message(
                    chat_id=user_id,
                    text=message_text,
                    parse_mode="HTML"
                )
        else:
            # –ò–Ω–∞—á–µ ‚Äî –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞
            await app.bot.send_message(
                chat_id=user_id,
                text=f"üì© –ù–æ–≤–æ–µ –ø–∏—Å—å–º–æ –æ—Ç {from_}\n<b>–¢–µ–º–∞:</b> {subject}",
                parse_mode='HTML'
            )

        # –û–±–Ω–æ–≤–ª—è–µ–º last_uid
        config["last_uid"] = uid
        save_user_config()

    # –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ, —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    config["last_check_time"] = now_dt.isoformat()
    save_user_config()

def schedule_check_mail(app: Application, loop):
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: –ø–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π event loop
    –∏ —á–µ—Ä–µ–∑ –Ω–µ–≥–æ —Å–æ–∑–¥–∞—ë—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É check_mail_for_all_users(app).
    """
    loop.create_task(check_mail_for_all_users(app))

async def post_init(application: Application):
    """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞."""
    loop = asyncio.get_running_loop()
    scheduler = AsyncIOScheduler()
    scheduler.add_job(
        schedule_check_mail,
        trigger='interval',
        seconds=CHECK_INTERVAL,
        args=[application, loop]
    )
    scheduler.start()
    logging.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")

if __name__ == "__main__":
    load_user_config()

    app = Application.builder().token(BOT_TOKEN).post_init(post_init).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("connect", connect))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥, ‚Äî –≤ handle_credentials
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_credentials))

    app.run_polling()
