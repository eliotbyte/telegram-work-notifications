import re
import logging
from bs4 import BeautifulSoup

def parse_jira_email(subject: str, raw_html: str) -> list[str]:
    """
    –ü–∞—Ä—Å–µ—Ä –ø–∏—Å–µ–º –æ—Ç Jira. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≥–æ—Ç–æ–≤—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è Telegram, 
    –µ—Å–ª–∏ —ç—Ç–æ –ø–∏—Å—å–º–æ –ø—Ä–æ Jira –∏ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
    –ï—Å–ª–∏ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –ø–∏—Å—å–º–æ –æ—Ç Jira –∏–ª–∏ –Ω–µ—Ç –ø–æ–Ω—è—Ç–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ ‚Äî –≤–µ—Ä–Ω—ë—Ç –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫.
    """
    lower_html = raw_html.lower()
    if "jira.task-cloud.ru" not in lower_html and "atlassian jira" not in lower_html:
        return []

    soup = BeautifulSoup(raw_html, "html.parser")
    parsed_messages = []

    # 1) –ò—â–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–¥–∞—á—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, NUTRB2B-104)
    link_el = soup.find("a", href=re.compile(r"https://jira\.task-cloud\.ru/browse/[A-Z0-9]+-\d+"))
    if link_el:
        issue_url = link_el["href"]
        issue_key = link_el.get_text(strip=True)
    else:
        issue_url = None
        issue_key = None

    # 2) –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏ –∏–∑ <h1>
    summary_el = soup.find("h1")
    summary = summary_el.get_text(strip=True) if summary_el else ""

    # 3) –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Å–æ–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫—É –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–µ—Å–ª–∏ –Ω–∞—à–ª–∏)
    if issue_key and issue_url:
        if summary:
            link_text = f'<a href="{issue_url}">[{issue_key}] {summary}</a>'
        else:
            link_text = f'<a href="{issue_url}">[{issue_key}]</a>'
    else:
        # fallback, –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        link_text = subject

    # 4) –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞ —Ü–µ–ª–∏–∫–æ–º (–≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤)
    body_text = soup.get_text(separator=" ", strip=True).lower()

    # 5) –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã:
    assigned_to_you = "assigned to you" in body_text
    you_were_mentioned = (
        "mentioned in a comment" in body_text
        or "you've been mentioned in a comment" in body_text
    )

    # –ò—â–µ–º "there is 1 update" –∏–ª–∏ "there are 2 updates" –∏ —Ç.–ø.
    updates_match = re.search(r"there (?:is|are) (\d+) update", body_text)
    updates_count = int(updates_match.group(1)) if updates_match else 0

    # 6) –ò—â–µ–º –∞–≤—Ç–æ—Ä–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ —Ñ—Ä–∞–∑–µ "Changes by <strong>–ò–ú–Ø>" 
    #    (–∏–Ω–æ–≥–¥–∞ –±—ã–≤–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–æ–≤, –µ—Å–ª–∏ –ø–∏—Å—å–º–æ —Å—É–º–º–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è)
    strong_tags = soup.find_all("strong")
    changes_authors = []
    for s in strong_tags:
        parent_text = s.parent.get_text(separator=" ", strip=True).lower()
        if "changes by" in parent_text:
            changes_authors.append(s.get_text(strip=True))

    # --- –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è ---

    # CASE A: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –ª–∏ —ç—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ ‚Äî –Ω–∞–∑–Ω–∞—á–∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º
    # (—Ç.–µ. 1 update, –µ—Å—Ç—å –∞–≤—Ç–æ—Ä, –∏ —Ñ–ª–∞–≥ assigned_to_you)
    if assigned_to_you and updates_count == 1 and len(changes_authors) == 1:
        # –ï–¥–∏–Ω–∏—á–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ -> —Å—Ä–∞–∑—É –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–º–µ–Ω–µ–º –∞–≤—Ç–æ—Ä–∞
        author = changes_authors[0]
        parsed_messages.append(
            f"‚úÖ {author} –Ω–∞–∑–Ω–∞—á–∏–ª(–∞) –≤–∞—Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º –∑–∞–¥–∞—á–∏ {link_text}"
        )
        # –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –¥–∞–ª—å—à–µ –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º "–∏–∑–º–µ–Ω–∏–ª(–∞) –∑–∞–¥–∞—á—É" –∏ —Ç.–¥.
    else:
        # –ï—Å–ª–∏ –Ω–∞—Å –Ω–∞–∑–Ω–∞—á–∏–ª–∏, –Ω–æ –∞–ø–¥–µ–π—Ç–æ–≤ –ª–∏–±–æ >1, –ª–∏–±–æ –Ω–µ—Ç –∞–≤—Ç–æ—Ä–∞, 
        # —Ç–æ –ø—Ä–æ—Å—Ç–æ –≥–æ–≤–æ—Ä–∏–º, —á—Ç–æ –Ω–∞–∑–Ω–∞—á–∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º
        if assigned_to_you:
            parsed_messages.append(
                f"‚úÖ –í–∞—Å –Ω–∞–∑–Ω–∞—á–∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º –∑–∞–¥–∞—á–∏ {link_text}"
            )
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å updates_count > 0 –∏ –µ—Å—Ç—å –∞–≤—Ç–æ—Ä(—ã) –∏–∑–º–µ–Ω–µ–Ω–∏–π ‚Äì —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è "–∏–∑–º–µ–Ω–∏–ª(–∞) –∑–∞–¥–∞—á—É"
        # (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ ‚Äì –±—É–¥–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π)
        if updates_count > 0 and changes_authors:
            for author in changes_authors:
                parsed_messages.append(
                    f"‚úèÔ∏è {author} –∏–∑–º–µ–Ω–∏–ª(–∞) –∑–∞–¥–∞—á—É {link_text}"
                )
        # –ï—Å–ª–∏ –∞–ø–¥–µ–π—Ç—ã –µ—Å—Ç—å, –Ω–æ –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ —É–∑–Ω–∞—Ç—å –∞–≤—Ç–æ—Ä–∞:
        elif updates_count > 0:
            parsed_messages.append(
                f"‚úèÔ∏è –í –∑–∞–¥–∞—á–µ {link_text} –µ—Å—Ç—å {updates_count} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ(–∏–π)."
            )

    # CASE B: –ï—Å–ª–∏ –≤–∞—Å —É–ø–æ–º—è–Ω—É–ª–∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö
    if you_were_mentioned and issue_key and issue_url:
        # –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–≤—Ç–æ—Ä–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
        mention_author = None

        for s in strong_tags:
            p_text = s.parent.get_text(separator=" ", strip=True).lower()

            # –ù–∞—Ö–æ–¥–∏–º –∏–º–µ–Ω–Ω–æ –±–ª–æ–∫, –≥–¥–µ "mentioned in a comment"
            if "mentioned in a comment" in p_text or "you've been mentioned in a comment" in p_text:
                # –°–∫–∏–ø–∞–µ–º —ç—Ç–æ—Ç <strong>, –ø–æ—Å–∫–æ–ª—å–∫—É –≤ –Ω—ë–º –∫–∞–∫ —Ä–∞–∑ –ª–µ–∂–∏—Ç "you've been mentioned..."
                continue
            
            # –ò—â–µ–º "–∞–≤—Ç–æ—Ä–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è" - –≤–æ–∑–º–æ–∂–Ω–æ, —Ä—è–¥–æ–º –µ—Å—Ç—å —Ñ—Ä–∞–∑–∞ "on 10/Apr" –∏ —Ç.–ø.
            # –∏–ª–∏ —Å–º–æ—Ç—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –≤–Ω—É—Ç—Ä–∏ parent_text —á—Ç–æ-—Ç–æ –≤—Ä–æ–¥–µ "on dd/mon"
            if "on " in p_text and "changes by" not in p_text:
                mention_author = s.get_text(strip=True)
                break

        if not mention_author:
            mention_author = "–ö—Ç–æ-—Ç–æ"

        parsed_messages.append(
            f"üëÄ {mention_author} —É–ø–æ–º—è–Ω—É–ª(–∞) –≤–∞—Å –≤ –∑–∞–¥–∞—á–µ {link_text}"
        )


    return parsed_messages
