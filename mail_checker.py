import asyncio
import logging
from datetime import datetime, timedelta
from email import policy
from email.parser import BytesParser
from imapclient import IMAPClient
from config import user_configs, save_user_config
from filters.jira_parser import parse_jira_email
from telegram.helpers import escape_markdown

async def check_mail_for_all_users(app):
    tasks = []
    for user_id_str, config in user_configs.items():
        tasks.append(asyncio.create_task(check_and_notify(app, int(user_id_str), config)))

    if tasks:
        await asyncio.gather(*tasks)

async def check_and_notify(app, user_id: int, config: dict):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –£—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è –≤ –∫–æ–Ω—Ñ–∏–≥–µ:
      - notifications.mail (bool): –ø–æ—Å—ã–ª–∞—Ç—å –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–∏—Å—å–º–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ Jira
      - notifications.jira[event_type] (bool): –ø–æ—Å—ã–ª–∞—Ç—å –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º Jira-—Å–æ–±—ã—Ç–∏–∏
    """
    email_value = config["email"]["value"]
    password = config["email"]["password"]
    host = config["email"]["host"]

    # –ï—Å–ª–∏ –ø–æ—á—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞, –≤—ã—Ö–æ–¥–∏–º
    if not email_value or not password:
        return

    logging.info(f"[{user_id}] –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—á—Ç—É {email_value}")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    fromiso = config.get("last_check_time", datetime.now().isoformat())
    last_check_time = datetime.fromisoformat(fromiso)
    now_dt = datetime.now()

    # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 15 –º–∏–Ω—É—Ç - —Å–º–µ—â–∞–µ–º
    if (now_dt - last_check_time) > timedelta(minutes=15):
        last_check_time = now_dt - timedelta(minutes=15)

    since_str = last_check_time.strftime("%d-%b-%Y")
    last_uid = config.get("last_uid", None)

    def fetch_new_messages():
        result = []
        try:
            with IMAPClient(host, ssl=True) as client:
                client.login(email_value, password)
                client.select_folder("INBOX", readonly=True)

                messages = client.search(["SINCE", since_str])
                logging.info(f"[{user_id}] –ù–∞–π–¥–µ–Ω–æ –ø–∏—Å–µ–º c {since_str}: {len(messages)}")

                for uid in messages:
                    if last_uid and uid <= last_uid:
                        continue
                    raw_data = client.fetch([uid], ["BODY[]"])[uid][b"BODY[]"]
                    msg = BytesParser(policy=policy.default).parsebytes(raw_data)
                    subject = msg["subject"] or "(–±–µ–∑ —Ç–µ–º—ã)"
                    from_ = msg["from"] or "(–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ)"

                    raw_html = ""
                    if msg.is_multipart():
                        for part in msg.walk():
                            if part.get_content_type() == "text/html":
                                charset = part.get_content_charset() or "utf-8"
                                raw_html = part.get_payload(decode=True).decode(charset, errors="replace")
                                break
                    else:
                        if msg.get_content_type() == "text/html":
                            charset = msg.get_content_charset() or "utf-8"
                            raw_html = msg.get_payload(decode=True).decode(charset, errors="replace")

                    result.append((uid, subject, from_, raw_html))
        except Exception as e:
            logging.error(f"[{user_id}] IMAP –æ—à–∏–±–∫–∞: {e}")
        return result

    new_messages = await asyncio.to_thread(fetch_new_messages)

    # –†–∞—Å—Å—ã–ª–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    for uid, subject, from_, raw_html in new_messages:
        # –ü–∞—Ä—Å–∏–º Jira
        jira_msgs = parse_jira_email(subject, raw_html)
        # jira_msgs:
        #   None -> –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ Jira
        #   [] -> —ç—Ç–æ Jira, –Ω–æ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ—Ç –Ω—É–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
        #   [—Å—Ç—Ä–æ–∫–∞, ...] -> —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏

        if jira_msgs is None:
            # –û–±—ã—á–Ω–æ–µ –ø–∏—Å—å–º–æ
            # –®–ª—ë–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ notifications.mail
            if config["notifications"]["mail"]:
                message_text = (
                    f"üì© –ù–æ–≤–æ–µ –ø–∏—Å—å–º–æ –æ—Ç {escape_markdown(from_)}\n"
                    f"*–¢–µ–º–∞:* {escape_markdown(subject)}"
                )
                await app.bot.send_message(
                    chat_id=user_id,
                    text=message_text,
                    parse_mode='Markdown'
                )
        elif len(jira_msgs) > 0:
            # Jira-—Å–æ–±—ã—Ç–∏—è –µ—Å—Ç—å
            # –ù–æ –Ω—É–∂–Ω–æ ¬´–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å¬ª —Å–æ–±—ã—Ç–∏—è, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á—Ç–æ-—Ç–æ –æ—Ç–∫–ª—é—á–∏–ª.
            # –î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å allowed_event_types –≤ parse_jira_email,
            # –∞ –ø–æ–∫–∞ —É –Ω–∞—Å –Ω–µ—Ç –ø—Ä—è–º–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞. –ú–æ–∂–Ω–æ ¬´–¥–æ—Ö–æ–¥—á–∏–≤–æ¬ª —Ä–µ—à–∏—Ç—å:
            #   1) –ü–∞—Ä—Å–∏–º –ø–æ–ª–Ω–æ—Å—Ç—å—é
            #   2) –í —Ç–µ–∫—Å—Ç–µ –Ω–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫–∏ "‚úÖ –Ω–∞–∑–Ω–∞—á–∏–ª(–∞)..." –∏ —Ç.–¥.
            #      –∏ –≤—ã–∫–∏–¥—ã–≤–∞–µ–º —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–∫–ª—é—á–µ–Ω—ã.
            # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã ‚Äì –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ parse_jira_email —É–∂–µ –≤—Å—ë –¥–∞—ë—Ç "–æ–¥–Ω–∏–º –∫—É—Å–∫–æ–º".
            # –ù–æ –µ—Å–ª–∏ —Ö–æ—Ç–∏–º –±–æ–ª–µ–µ —Ç–æ–Ω–∫–æ ‚Äì –Ω—É–∂–Ω–æ –¥–æ—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–∞–º –ø–∞—Ä—Å–µ—Ä,
            # –∏–ª–∏ –≤—ã–¥–∞–≤–∞—Ç—å parse_jira_email(..., allowed_event_types).
            # –í –∑–∞–¥–∞—á–µ —Å–∫–∞–∑–∞–Ω–æ: "–ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç" ‚Äì
            # –∑–Ω–∞—á–∏—Ç –ª–æ–≥–∏—á–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à—Ç–∞—Ç–Ω–æ–µ API "allowed_event_types".
            #
            # –î–æ–ø—É—Å—Ç–∏–º, –º—ã –ø–∏—à–µ–º:
            pass_jira_msgs = []
            for text_block in jira_msgs:
                # –ü—Ä–æ–≤–µ—Ä–∏–º, –æ—Ç–∫–ª—é—á—ë–Ω –ª–∏ —Ç–∞–º "worklog", "comment" –∏ —Ç.–¥.
                # –ù–æ –ø—Ä–æ—â–µ –≤—Å–µ–≥–æ ‚Äì –º—ã –≤ —Å–∞–º–æ–º parse_jira_email –º–æ–∂–µ–º –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å allowed_event_types,
                # —á—Ç–æ–±—ã –æ–Ω –≤–æ–∑–≤—Ä–∞—â–∞–ª None –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ç–µ—Ö —Å–æ–±—ã—Ç–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–∫–ª—é—á–µ–Ω—ã.
                # –ï—Å–ª–∏ —É–ø—Ä–æ—Å—Ç–∏—Ç—å: –±—É–¥–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤—Å—ë, —á—Ç–æ –ø—Ä–∏—à–ª–æ, –ø–æ–ª–∞–≥–∞—è,
                # —á—Ç–æ –Ω–∞ —ç—Ç–∞–ø–µ parse –≤—Å–µ –Ω–µ–Ω—É–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è —Å–∞–º–∏ –æ—Ç—Å–µ—è–ª–∏—Å—å (—Å–º. –Ω–∏–∂–µ).
                pass_jira_msgs.append(text_block)

            # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—É—Å—Ç–æ ‚Äì –∑–Ω–∞—á–∏—Ç —É–≤–µ–¥–æ–º–ª—è—Ç—å –Ω–µ –æ —á–µ–º
            if len(pass_jira_msgs) == 0:
                pass
            else:
                for message_text in pass_jira_msgs:
                    await app.bot.send_message(
                        chat_id=user_id,
                        text=message_text,
                        parse_mode="HTML"
                    )
        else:
            # Jira, –Ω–æ –Ω–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏—Ö —Å–æ–±—ã—Ç–∏–π
            pass

        # –û–±–Ω–æ–≤–ª—è–µ–º last_uid
        config["last_uid"] = uid
        save_user_config()

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
    config["last_check_time"] = now_dt.isoformat()
    save_user_config()
