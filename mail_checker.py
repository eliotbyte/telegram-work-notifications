import asyncio
import logging
from datetime import datetime, timedelta
from email import policy
from email.parser import BytesParser

from imapclient import IMAPClient

import config
from filters.jira_parser import parse_jira_email
from telegram.helpers import escape_markdown


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  ‚ö° –ë—ã—Å—Ç—Ä–∞—è UID‚Äë–∑–∞–∫–ª–∞–¥–∫–∞  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def bookmark_latest_uid(
    user_id: int,
    email: str,
    token: str,
    host: str = "imap.yandex.ru",
) -> None:
    """
    ‚Ä¢ –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π UID –≤ INBOX
    ‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ –∫–æ–Ω—Ñ–∏–≥ –≤–º–µ—Å—Ç–µ —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º.
    –ù—É–∂–Ω–∞, —á—Ç–æ–±—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ù–ï —Ä–∞—Å—Å—ã–ª–∞—Ç—å —Å—Ç–∞—Ä—ã–µ –ø–∏—Å—å–º–∞.
    """

    def _get_highest_uid() -> int:
        with IMAPClient(host, ssl=True) as c:
            c.oauth2_login(email, token)
            c.select_folder("INBOX", readonly=True)
            uids = c.search(["ALL"])
            return max(uids) if uids else 0

    highest_uid = await asyncio.to_thread(_get_highest_uid)

    config.update_user_fields(
        user_id,
        last_uid=highest_uid,
        last_check_time=datetime.now().isoformat(),
    )

    logging.info(f"[{user_id}] UID‚Äë–∑–∞–∫–ª–∞–¥–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ ‚áí {highest_uid}")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def check_mail_for_all_users(app):
    logging.info("=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===")

    # –ë–µ—Ä—ë–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä—è–º–æ –∏–∑ SQLite
    all_users = config.get_all_user_configs()

    tasks = [
        asyncio.create_task(check_and_notify(app, uid, cfg))
        for uid, cfg in all_users
    ]
    if tasks:
        await asyncio.gather(*tasks)

    logging.info("=== –ó–∞–≤–µ—Ä—à—ë–Ω –ø—Ä–æ—Ö–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—á—Ç—ã ===")


async def retry_imap_connect(func, max_retries=3, delay=5):
    """–ü–æ–≤—Ç–æ—Ä—è–µ—Ç –ø–æ–ø—ã—Ç–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ IMAP —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π."""
    for attempt in range(max_retries):
        try:
            return await asyncio.to_thread(func)
        except Exception as e:
            if attempt == max_retries - 1:  # –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
                raise
            logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
            await asyncio.sleep(delay)


async def check_and_notify(app, user_id: int, cfg: dict):
    email_value = cfg["email"]["value"]
    token = cfg["email"]["password"]
    host = cfg["email"]["host"]
    if not email_value or not token:
        logging.info(f"[{user_id}] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—á—Ç—ã")
        return

    logging.info(f"[{user_id}] –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—á—Ç—É {email_value}")

    # --- –¥–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏ ----------------------------------------------------
    now_dt = datetime.now()
    last_check_time = datetime.fromisoformat(
        cfg.get("last_check_time", now_dt.isoformat())
    )

    if (now_dt - last_check_time) > timedelta(minutes=15):
        last_check_time = now_dt - timedelta(minutes=15)

    since_str = last_check_time.strftime("%d-%b-%Y")
    last_uid = cfg.get("last_uid")

    # --- –ø–æ–ª—É—á–∞–µ–º –ø–∏—Å—å–º–∞ -----------------------------------------------------
    def fetch_new():
        res = []
        try:
            with IMAPClient(host, ssl=True) as c:
                c.oauth2_login(email_value, token)
                c.select_folder("INBOX", readonly=True)
                for uid in c.search(["SINCE", since_str]):
                    if last_uid and uid <= last_uid:
                        continue
                    data = c.fetch([uid], ["BODY[]", "INTERNALDATE"])[uid]
                    if data[b"INTERNALDATE"].replace(tzinfo=None) <= last_check_time:
                        continue
                    raw_data = data[b"BODY[]"]
                    msg = BytesParser(policy=policy.default).parsebytes(raw_data)
                    subject = msg["subject"] or "(–±–µ–∑ —Ç–µ–º—ã)"
                    sender = msg["from"] or "(–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ)"
                    html = ""
                    if msg.is_multipart():
                        for part in msg.walk():
                            if part.get_content_type() == "text/html":
                                html = part.get_payload(decode=True).decode(
                                    part.get_content_charset() or "utf-8",
                                    errors="replace",
                                )
                                break
                    elif msg.get_content_type() == "text/html":
                        html = msg.get_payload(decode=True).decode(
                            msg.get_content_charset() or "utf-8",
                            errors="replace",
                        )
                    res.append((uid, subject, sender, html))
        except Exception as e:
            logging.error(f"[{user_id}] IMAP/XOAUTH2 –æ—à–∏–±–∫–∞: {e}")
        return res

    try:
        new_messages = await retry_imap_connect(fetch_new)
    except Exception as e:
        logging.error(f"[{user_id}] –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ IMAP –Ω–µ —É–¥–∞–ª–∏—Å—å: {e}")
        return

    if not new_messages:
        logging.info(f"[{user_id}] –ù–æ–≤—ã–µ –ø–∏—Å—å–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    logging.info(f"[{user_id}] –ù–∞–π–¥–µ–Ω–æ {len(new_messages)} –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º")

    # --- ¬´—Ç–∏—Ö–∏–µ —á–∞—Å—ã¬ª --------------------------------------------------------
    def quiet_time() -> bool:
        msk = datetime.utcnow() + timedelta(hours=3)
        return not (0 <= msk.weekday() <= 4 and 9 <= msk.hour < 18)

    # --- —Ä–∞—Å—Å—ã–ª–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ----------------------------------------------
    last_processed_uid = last_uid
    for uid, subject, sender, html in new_messages:
        allowed = {k for k, v in cfg["notifications"]["jira"].items() if v}
        mute = cfg["notifications"].get("quiet_notifications", True) and quiet_time()
        jira_result = parse_jira_email(html)

        if jira_result is None:
            if not cfg["notifications"]["mail"]:
                logging.info(f"[{user_id}] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∏—Å—å–º–æ –æ—Ç {sender}: —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–∫–ª—é—á–µ–Ω—ã email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                continue

            msg_text = f"üì© –ü–∏—Å—å–º–æ –æ—Ç {escape_markdown(sender)}\n*–¢–µ–º–∞:* {escape_markdown(subject)}"
            await app.bot.send_message(
                user_id,
                msg_text,
                parse_mode="Markdown",
                disable_notification=mute,
            )
            logging.info(f"[{user_id}] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–∏—Å—å–º–µ –æ—Ç {sender} (—Ç–∏—Ö–∏–π —Ä–µ–∂–∏–º: {mute})")
        else:
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ author_events
            all_events = []
            for author, events in jira_result['author_events'].items():
                for event in events:
                    event['author'] = author
                    all_events.append(event)
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ allowed
            filtered_events = [e for e in all_events if e['type'] in allowed]
            if not filtered_events:
                logging.info(f"[{user_id}] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º Jira –ø–∏—Å—å–º–æ: –ø–∞—Ä—Å–µ—Ä –Ω–µ –Ω–∞—à–µ–ª –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏—Ö —Å–æ–±—ã—Ç–∏–π")
                continue

            # –ó–∞–º–µ–Ω—è–µ–º None –∞–≤—Ç–æ—Ä–æ–≤
            valid_authors = [e['author'] for e in filtered_events if e['author'] is not None]
            default_author = valid_authors[0] if valid_authors else "–ö—Ç–æ-—Ç–æ"
            for event in filtered_events:
                if event['author'] is None:
                    event['author'] = default_author

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ –∞–≤—Ç–æ—Ä—É
            events_by_author = {}
            for event in filtered_events:
                author = event['author']
                if author not in events_by_author:
                    events_by_author[author] = []
                events_by_author[author].append(event)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            task_info = f"[{jira_result['task_key']}] {jira_result['task_summary']}"
            if jira_result['task_url']:
                task_info = f'<a href="{jira_result["task_url"]}">{task_info}</a>'
            msg_lines = [task_info, ""]

            for author, events in events_by_author.items():
                msg_lines.append(f"{author}:")
                for event in events:
                    event_type = event['type']

                    if event_type == "assigned":
                        msg_lines.append("‚úÖ –Ω–∞–∑–Ω–∞—á–∏–ª(–∞) –≤–∞—Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º –∑–∞–¥–∞—á–∏")
                    elif event_type == "created":
                        msg_lines.append("üìå —Å–æ–∑–¥–∞–ª(–∞) –∑–∞–¥–∞—á—É")
                    elif event_type == "update":
                        msg_lines.append("‚úèÔ∏è –≤–Ω–µ—Å(–ª–∞) –∏–∑–º–µ–Ω–µ–Ω–∏—è")
                    elif event_type == "comment":
                        msg_lines.append("üí¨ –æ—Å—Ç–∞–≤–∏–ª(–∞) –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
                    elif event_type == "mention_description":
                        msg_lines.append("üëÄ —É–ø–æ–º—è–Ω—É–ª(–∞) –≤–∞—Å –≤ –∑–∞–¥–∞—á–µ")
                    elif event_type == "mention_comment":
                        msg_lines.append("üëÄ —É–ø–æ–º—è–Ω—É–ª(–∞) –≤–∞—Å –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö")
                    elif event_type == "worklog":
                        msg_lines.append("‚è±Ô∏è —Ç—Ä–µ–∫–Ω—É–ª(–∞) –≤—Ä–µ–º—è")

            msg_text = "\n".join(msg_lines)
            await app.bot.send_message(
                user_id,
                msg_text,
                parse_mode="HTML",
                disable_notification=mute,
            )
            logging.info(f"[{user_id}] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ Jira —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (—Ç–∏—Ö–∏–π —Ä–µ–∂–∏–º: {mute})")


        last_processed_uid = max(last_processed_uid or 0, uid)

    # --- —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∏ –≤—Ä–µ–º—è ------------------------------------------
    config.update_user_fields(
        user_id,
        last_uid=last_processed_uid,
        last_check_time=now_dt.isoformat(),
    )
    logging.info(f"[{user_id}] –û–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–∏—Å—å–º–∞: {last_processed_uid}")
