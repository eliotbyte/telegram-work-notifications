import asyncio
import base64
import logging
from datetime import datetime, timedelta
from email import policy
from email.parser import BytesParser
from imapclient import IMAPClient
import config
from config import save_user_config
from filters.jira_parser import parse_jira_email
from telegram.helpers import escape_markdown


async def check_mail_for_all_users(app):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º.
    """
    logging.info("=== –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—á—Ç—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===")
    tasks = []
    for user_id_str, config_item in config.user_configs.items():
        tasks.append(asyncio.create_task(check_and_notify(app, int(user_id_str), config_item)))

    if tasks:
        await asyncio.gather(*tasks)
    logging.info("=== –ó–∞–≤–µ—Ä—à—ë–Ω –ø—Ä–æ—Ö–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—á—Ç—ã ===")


async def check_and_notify(app, user_id: int, config: dict):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –£—á–∏—Ç—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ ¬´mail¬ª –∏ ¬´jira[event_type]¬ª.
    """
    email_value = config["email"]["value"]
    token = config["email"]["password"]        # [OAUTH] —Ä–∞–Ω—å—à–µ –±—ã–ª ¬´password¬ª
    host = config["email"]["host"]

    # –ï—Å–ª–∏ –ø–æ—á—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞, –≤—ã—Ö–æ–¥–∏–º
    if not email_value or not token:
        return

    logging.info(f"[{user_id}] –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—á—Ç—É {email_value}")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    fromiso = config.get("last_check_time", datetime.now().isoformat())
    last_check_time = datetime.fromisoformat(fromiso)
    now_dt = datetime.now()

    if (now_dt - last_check_time) > timedelta(minutes=15):
        last_check_time = now_dt - timedelta(minutes=15)

    since_str = last_check_time.strftime("%d-%b-%Y")
    last_uid = config.get("last_uid", None)

    def fetch_new_messages():
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å IMAP –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ.
        """
        result = []
        try:
            with IMAPClient(host, ssl=True) as client:
                # ------------------------------------------------------------------
                # [OAUTH] –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –æ–±—ë—Ä—Ç–∫—É oauth2_login()
                #         (–º–µ—Ö–∞–Ω–∏–∑–º –ø–æ‚Äë—É–º–æ–ª—á–∞–Ω–∏—é¬†‚Äî ‚ÄòXOAUTH2‚Äô)
                # ------------------------------------------------------------------
                client.oauth2_login(email_value, token)
                # ------------------------------------------------------------------

                client.select_folder("INBOX", readonly=True)

                messages = client.search(["SINCE", since_str])
                logging.info(f"[{user_id}] –ù–∞–π–¥–µ–Ω–æ –ø–∏—Å–µ–º c {since_str}: {len(messages)}")

                for uid in messages:
                    if last_uid and uid <= last_uid:
                        continue
                    raw_data = client.fetch([uid], ["BODY[]"])[uid][b"BODY[]"]
                    msg = BytesParser(policy=policy.default).parsebytes(raw_data)
                    subject = msg["subject"] or "(–±–µ–∑ —Ç–µ–º—ã)"
                    from_ = msg["from"] or "(–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ)"

                    raw_html = ""
                    if msg.is_multipart():
                        for part in msg.walk():
                            if part.get_content_type() == "text/html":
                                charset = part.get_content_charset() or "utf-8"
                                raw_html = part.get_payload(decode=True).decode(charset, errors="replace")
                                break
                    else:
                        if msg.get_content_type() == "text/html":
                            charset = msg.get_content_charset() or "utf-8"
                            raw_html = msg.get_payload(decode=True).decode(charset, errors="replace")

                    result.append((uid, subject, from_, raw_html))
        except Exception as e:
            logging.error(f"[{user_id}] IMAP/XOAUTH2 –æ—à–∏–±–∫–∞: {e}")   # [OAUTH] —É—Ç–æ—á–Ω–∏–ª–∏ —Ç–∏–ø –æ—à–∏–±–∫–∏
        return result

    new_messages = await asyncio.to_thread(fetch_new_messages)

    # [MOD] –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è "—Ç–∏—Ö–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"
    def is_quiet_time() -> bool:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —Å–µ–π—á–∞—Å –Ω–µ—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è (—Å —É—á—ë—Ç–æ–º –ú–°–ö 9-18 –ü–Ω-–ü—Ç).
        """
        moscow_dt = datetime.utcnow() + timedelta(hours=3)  # UTC+3 –¥–ª—è –ú–æ—Å–∫–≤—ã
        # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫=0, ..., –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ=6
        weekday = moscow_dt.weekday()  # 0..6
        hour = moscow_dt.hour
        # –†–∞–±–æ—á–∏–µ –¥–Ω–∏: 0..4 (–ü–Ω..–ü—Ç), —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã: 9..17
        if 0 <= weekday <= 4 and 9 <= hour < 18:
            return False
        return True

    # –†–∞—Å—Å—ã–ª–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    for uid, subject, from_, raw_html in new_messages:
        # –†–∞–∑–±–∏—Ä–∞–µ–º Jira
        user_jira_conf = config["notifications"]["jira"]
        allowed = {k for k, v in user_jira_conf.items() if v}
        jira_msgs = parse_jira_email(subject, raw_html, allowed_event_types=allowed)

        # [MOD] –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω "quiet_notifications" –∏ —Å–µ–π—á–∞—Å —Ç–∏—Ö–æ–µ –≤—Ä–µ–º—è ‚Äî
        #       —Ç–æ disable_notification=True
        quiet_enabled = config["notifications"].get("quiet_notifications", True)
        disable_notif = quiet_enabled and is_quiet_time()

        if jira_msgs is None:
            # –û–±—ã—á–Ω–æ–µ –ø–∏—Å—å–º–æ
            if config["notifications"]["mail"]:
                message_text = (
                    f"üì© –ù–æ–≤–æ–µ –ø–∏—Å—å–º–æ –æ—Ç {escape_markdown(from_)}\n"
                    f"*–¢–µ–º–∞:* {escape_markdown(subject)}"
                )
                await app.bot.send_message(
                    chat_id=user_id,
                    text=message_text,
                    parse_mode='Markdown',
                    disable_notification=disable_notif  # [MOD]
                )
        elif len(jira_msgs) > 0:
            # Jira‚Äë—Å–æ–±—ã—Ç–∏—è –µ—Å—Ç—å (–∏ –Ω–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã)
            for message_text in jira_msgs:
                await app.bot.send_message(
                    chat_id=user_id,
                    text=message_text,
                    parse_mode="HTML",
                    disable_notification=disable_notif  # [MOD]
                )
        else:
            # Jira, –Ω–æ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å
            pass

        # –û–±–Ω–æ–≤–ª—è–µ–º last_uid
        config["last_uid"] = uid
        save_user_config()

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
    config["last_check_time"] = now_dt.isoformat()
    save_user_config()
